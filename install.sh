#!/bin/bash

# SRAOUF Perfect Installation Script
# ÿ≥ŸÉÿ±ŸäŸæÿ™ ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑŸÖÿ´ÿßŸÑŸä ŸÑÿ≥ÿ±ÿßŸàŸÅ - ŸäÿπŸÖŸÑ ÿ®ÿ£ŸÖÿ± Ÿàÿßÿ≠ÿØ ÿ®ŸÑÿß ŸÖÿ¥ÿßŸÉŸÑ
# ÿßŸÑÿ•ÿµÿØÿßÿ±: 3.0 BULLETPROOF

set -e

# ÿ£ŸÑŸàÿßŸÜ ŸÑŸÑŸàÿ∂Ÿàÿ≠
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
BOLD='\033[1m'
NC='\033[0m'

# ŸÖÿ™ÿ∫Ÿäÿ±ÿßÿ™ ÿ£ÿ≥ÿßÿ≥Ÿäÿ©
SRAOUF_DIR="$(pwd)"
USER_HOME="$HOME"
CURRENT_USER="$(whoami)"
LOG_FILE="$SRAOUF_DIR/logs/install.log"

# ÿ•ŸÜÿ¥ÿßÿ° ŸÖÿ¨ŸÑÿØ ÿßŸÑŸÑŸàÿ∫ÿ≤
mkdir -p logs

# ÿØŸàÿßŸÑ ÿßŸÑÿ∑ÿ®ÿßÿπÿ©
print_header() {
    echo -e "${PURPLE}${BOLD}"
    echo "üïπÔ∏è ================================================== üïπÔ∏è"
    echo "    $1"
    echo "üïπÔ∏è ================================================== üïπÔ∏è"
    echo -e "${NC}"
}

print_step() {
    echo -e "${CYAN}${BOLD}[$(date +%H:%M:%S)]${NC} $1"
}

print_success() {
    echo -e "${GREEN}${BOLD}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}${BOLD}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}${BOLD}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# ÿßŸÑÿ™ÿ≠ŸÇŸÇ ŸÖŸÜ ÿßŸÑÿ£ÿÆÿ∑ÿßÿ°
check_error() {
    if [[ $? -ne 0 ]]; then
        print_error "ŸÅÿ¥ŸÑ ŸÅŸä: $1"
        print_error "ÿ±ÿßÿ¨ÿπ ÿßŸÑÿ≥ÿ¨ŸÑ: $LOG_FILE"
        exit 1
    fi
}

# ÿ•ÿπÿ∑ÿßÿ° ÿßŸÑÿ£ÿ∞ŸàŸÜÿßÿ™ ÿßŸÑŸÉÿßŸÖŸÑÿ© ŸÅŸàÿ±ÿßŸã
fix_permissions_immediately() {
    print_step "ÿ•ÿπÿ∑ÿßÿ° ÿßŸÑÿ£ÿ∞ŸàŸÜÿßÿ™ ÿßŸÑŸÉÿßŸÖŸÑÿ© ŸÅŸàÿ±ÿßŸã..."
    
    # ÿ£ÿ∞ŸàŸÜÿßÿ™ ÿßŸÑÿ™ŸÜŸÅŸäÿ∞ ŸÑŸÑÿ≥ŸÉÿ±ŸäŸæÿ™ÿßÿ™
    chmod +x "$SRAOUF_DIR"/*.sh 2>/dev/null || true
    chmod +x "$SRAOUF_DIR"/scripts/*.sh 2>/dev/null || true
    
    # ÿ£ÿ∞ŸàŸÜÿßÿ™ ŸÉÿßŸÖŸÑÿ© ŸÑŸÑŸÖÿ¨ŸÑÿØÿßÿ™
    chmod -R 755 "$SRAOUF_DIR" 2>/dev/null || true
    
    # ÿ£ÿ∞ŸàŸÜÿßÿ™ ÿßŸÑŸÇÿ±ÿßÿ°ÿ© ŸÑŸÑÿ•ÿπÿØÿßÿØÿßÿ™
    chmod 644 "$SRAOUF_DIR"/configs/*.cfg 2>/dev/null || true
    chmod 644 "$SRAOUF_DIR"/*.md 2>/dev/null || true
    
    print_success "ÿ™ŸÖ ÿ•ÿπÿ∑ÿßÿ° ÿ¨ŸÖŸäÿπ ÿßŸÑÿ£ÿ∞ŸàŸÜÿßÿ™"
}

# ÿ•ŸÜÿ¥ÿßÿ° ŸáŸäŸÉŸÑ ÿßŸÑŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑŸÖÿ´ÿßŸÑŸä
create_perfect_structure() {
    print_step "ÿ•ŸÜÿ¥ÿßÿ° ŸáŸäŸÉŸÑ ÿßŸÑŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑŸÖÿ´ÿßŸÑŸä..."
    
    # ÿßŸÑŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
    mkdir -p "$SRAOUF_DIR"/{scripts,configs,games,assets,docs,emulators,saves,states,screenshots,logs}
    
    # ŸÖÿ¨ŸÑÿØÿßÿ™ ŸÅÿ±ÿπŸäÿ© ŸÑŸÑÿ£ŸÑÿπÿßÿ®
    mkdir -p "$SRAOUF_DIR/games"/{nintendo-{nes,snes,gb,gbc,gba,n64},sega-{genesis,mastersystem,gamegear},arcade-{mame,neogeo,fba},sony-psx,atari-{2600,7800},commodore-64,amiga,turbografx16,msx,ports}
    
    # ŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑÿ£ÿµŸàŸÑ
    mkdir -p "$SRAOUF_DIR/assets"/{images,icons,fonts,themes,sounds,shaders,overlays,wallpapers}
    
    # ŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™
    mkdir -p "$SRAOUF_DIR/configs"/{autoconfig,playlists,cheats,overlays}
    
    # ŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑŸÖÿ≠ÿßŸÉŸäÿßÿ™
    mkdir -p "$SRAOUF_DIR/emulators"/{bios,cores}
    
    # ŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ
    mkdir -p ~/.emulationstation ~/.config/retroarch
    
    print_success "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ŸáŸäŸÉŸÑ ÿßŸÑŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑŸÖÿ´ÿßŸÑŸä"
}

# ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÜÿ∏ÿßŸÖ
update_system() {
    print_step "ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÜÿ∏ÿßŸÖ..."
    
    export DEBIAN_FRONTEND=noninteractive
    sudo apt update -y
    sudo apt install -y curl wget git unzip build-essential cmake
    
    print_success "ÿ™ŸÖ ÿ™ÿ≠ÿØŸäÿ´ ÿßŸÑŸÜÿ∏ÿßŸÖ"
}

# ÿ™ÿ´ÿ®Ÿäÿ™ RetroArch ŸàÿßŸÑŸÖÿ≠ÿßŸÉŸäÿßÿ™
install_emulators() {
    print_step "ÿ™ÿ´ÿ®Ÿäÿ™ RetroArch ŸàÿßŸÑŸÖÿ≠ÿßŸÉŸäÿßÿ™..."
    
    # ÿ™ÿ´ÿ®Ÿäÿ™ RetroArch
    sudo apt install -y retroarch retroarch-assets libretro-* || {
        print_warning "ÿ™ÿ´ÿ®Ÿäÿ™ ÿ®ÿØŸäŸÑ..."
        sudo add-apt-repository -y ppa:libretro/stable
        sudo apt update
        sudo apt install -y retroarch
    }
    
    # ÿ™ÿ´ÿ®Ÿäÿ™ EmulationStation
    sudo apt install -y emulationstation || print_warning "EmulationStation ÿ∫Ÿäÿ± ŸÖÿ™ŸàŸÅÿ±"
    
    # ÿ™ÿ´ÿ®Ÿäÿ™ ÿ£ÿØŸàÿßÿ™ ÿ•ÿ∂ÿßŸÅŸäÿ©
    sudo apt install -y joystick jstest-gtk evtest bluez
    
    print_success "ÿ™ŸÖ ÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑŸÖÿ≠ÿßŸÉŸäÿßÿ™"
}

# ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™
create_configs() {
    print_step "ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™..."
    
    # ÿ•ÿπÿØÿßÿØÿßÿ™ RetroArch
    cat > "$SRAOUF_DIR/configs/retroarch.cfg" << EOF
# SRAOUF RetroArch Configuration
video_driver = "gl"
video_width = 1920
video_height = 1080
video_fullscreen = true
video_vsync = true
video_smooth = false
audio_driver = "alsa"
audio_enable = true
input_driver = "udev"
input_autodetect_enable = true
menu_driver = "xmb"
system_directory = "$SRAOUF_DIR/emulators/bios"
savestate_directory = "$SRAOUF_DIR/states"
savefile_directory = "$SRAOUF_DIR/saves"
screenshot_directory = "$SRAOUF_DIR/screenshots"
user_language = 14
savestate_auto_save = true
savestate_auto_load = true
EOF

    # ŸÜÿ≥ÿÆ ŸÑŸÑŸÖŸÉÿßŸÜ ÿßŸÑÿµÿ≠Ÿäÿ≠
    cp "$SRAOUF_DIR/configs/retroarch.cfg" ~/.config/retroarch/retroarch.cfg
    
    # ÿ•ÿπÿØÿßÿØÿßÿ™ EmulationStation
    cat > "$SRAOUF_DIR/configs/es_systems.cfg" << EOF
<?xml version="1.0"?>
<systemList>
    <system>
        <name>nes</name>
        <fullname>Nintendo Entertainment System</fullname>
        <path>$SRAOUF_DIR/games/nintendo-nes</path>
        <extension>.nes .NES .zip .ZIP</extension>
        <command>retroarch -L /usr/lib/*/libretro/nestopia_libretro.so "%ROM%"</command>
        <platform>nes</platform>
        <theme>nes</theme>
    </system>
    <system>
        <name>gb</name>
        <fullname>Game Boy</fullname>
        <path>$SRAOUF_DIR/games/nintendo-gb</path>
        <extension>.gb .GB .zip .ZIP</extension>
        <command>retroarch -L /usr/lib/*/libretro/gambatte_libretro.so "%ROM%"</command>
        <platform>gb</platform>
        <theme>gb</theme>
    </system>
</systemList>
EOF

    cp "$SRAOUF_DIR/configs/es_systems.cfg" ~/.emulationstation/es_systems.cfg
    
    print_success "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿßŸÑÿ•ÿπÿØÿßÿØÿßÿ™"
}

# ÿ•ŸÜÿ¥ÿßÿ° ÿ≥ŸÉÿ±ŸäŸæÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
create_launcher() {
    print_step "ÿ•ŸÜÿ¥ÿßÿ° ÿ≥ŸÉÿ±ŸäŸæÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ..."
    
    mkdir -p "$SRAOUF_DIR/scripts"
    
    cat > "$SRAOUF_DIR/scripts/launch.sh" << 'EOF'
#!/bin/bash
# SRAOUF Launcher
SRAOUF_DIR="$(dirname "$(dirname "$(realpath "$0")")")"
cd "$SRAOUF_DIR"

if command -v emulationstation &> /dev/null; then
    emulationstation
elif command -v retroarch &> /dev/null; then
    retroarch --menu
else
    echo "‚ùå ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖÿ≠ÿßŸÉŸä!"
    read -p "ÿßÿ∂ÿ∫ÿ∑ Enter..."
fi
EOF

    chmod +x "$SRAOUF_DIR/scripts/launch.sh"
    
    print_success "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ≥ŸÉÿ±ŸäŸæÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ"
}

# ÿ•ŸÜÿ¥ÿßÿ° ÿ£ŸäŸÇŸàŸÜÿ© ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ®
create_desktop_icon() {
    print_step "ÿ•ŸÜÿ¥ÿßÿ° ÿ£ŸäŸÇŸàŸÜÿ© ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ®..."
    
    # ÿ•ŸÜÿ¥ÿßÿ° ÿ£ŸäŸÇŸàŸÜÿ©
    mkdir -p "$SRAOUF_DIR/assets/icons"
    
    cat > "$SRAOUF_DIR/assets/icons/sraouf.svg" << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<svg width="64" height="64" xmlns="http://www.w3.org/2000/svg">
  <rect width="64" height="64" fill="#4CAF50" rx="8"/>
  <text x="32" y="40" font-family="Arial" font-size="28" fill="white" text-anchor="middle">üïπÔ∏è</text>
</svg>
EOF

    # ÿ•ŸÜÿ¥ÿßÿ° ŸÖŸÑŸÅ ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ®
    cat > "$USER_HOME/Desktop/SRAOUF.desktop" << EOF
[Desktop Entry]
Version=1.0
Type=Application
Name=üïπÔ∏è ÿ≥ÿ±ÿßŸàŸÅ ŸÑŸÑÿ£ŸÑÿπÿßÿ®
Comment=ŸÖÿ≠ÿßŸÉŸä ÿßŸÑÿ£ŸÑÿπÿßÿ® ÿßŸÑŸÉŸÑÿßÿ≥ŸäŸÉŸäÿ©
Icon=$SRAOUF_DIR/assets/icons/sraouf.svg
Exec=$SRAOUF_DIR/scripts/launch.sh
Terminal=true
Categories=Game;Emulator;
StartupNotify=true
EOF

    chmod +x "$USER_HOME/Desktop/SRAOUF.desktop"
    
    print_success "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿ£ŸäŸÇŸàŸÜÿ© ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ®"
}

# ÿ™ÿ≠ŸÖŸäŸÑ ÿ£ŸÑÿπÿßÿ® ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©
download_sample_games() {
    print_step "ÿ•ÿ∂ÿßŸÅÿ© ÿ£ŸÑÿπÿßÿ® ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©..."
    
    # ÿ•ŸÜÿ¥ÿßÿ° ÿ£ŸÑÿπÿßÿ® ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ© ŸÑŸÑÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÅŸàÿ±Ÿä
    cd "$SRAOUF_DIR/games"
    
    # Nintendo NES
    cd nintendo-nes
    echo "This is a test ROM: Super Mario Bros Demo" > "Super Mario Bros Demo.nes"
    echo "This is a test ROM: Pac-Man Test" > "Pac-Man Test.nes"
    echo "This is a test ROM: Tetris Sample" > "Tetris Sample.nes"
    
    # Game Boy
    cd ../nintendo-gb
    echo "This is a test ROM: Pokemon Red Demo" > "Pokemon Red Demo.gb"
    echo "This is a test ROM: Zelda Demo" > "Zelda Demo.gb"
    echo "This is a test ROM: Tetris GB" > "Tetris GB.gb"
    
    print_success "ÿ™ŸÖ ÿ•ÿ∂ÿßŸÅÿ© ÿ£ŸÑÿπÿßÿ® ÿ™ÿ¨ÿ±Ÿäÿ®Ÿäÿ©"
}

# ÿßÿÆÿ™ÿ®ÿßÿ± ÿ¥ÿßŸÖŸÑ
run_final_test() {
    print_step "ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßÿÆÿ™ÿ®ÿßÿ± ÿ¥ÿßŸÖŸÑ..."
    
    local errors=0
    
    # ÿßÿÆÿ™ÿ®ÿßÿ± RetroArch
    if command -v retroarch &> /dev/null; then
        print_success "‚úÖ RetroArch ŸÖŸàÿ¨ŸàÿØ"
    else
        print_error "‚ùå RetroArch ŸÖŸÅŸÇŸàÿØ"
        ((errors++))
    fi
    
    # ÿßÿÆÿ™ÿ®ÿßÿ± ÿßŸÑŸÖÿ¨ŸÑÿØÿßÿ™
    if [[ -d "$SRAOUF_DIR/games" ]]; then
        print_success "‚úÖ ŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑÿ£ŸÑÿπÿßÿ® ŸÖŸàÿ¨ŸàÿØÿ©"
    else
        print_error "‚ùå ŸÖÿ¨ŸÑÿØÿßÿ™ ÿßŸÑÿ£ŸÑÿπÿßÿ® ŸÖŸÅŸÇŸàÿØÿ©"
        ((errors++))
    fi
    
    # ÿßÿÆÿ™ÿ®ÿßÿ± ÿ≥ŸÉÿ±ŸäŸæÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ
    if [[ -x "$SRAOUF_DIR/scripts/launch.sh" ]]; then
        print_success "‚úÖ ÿ≥ŸÉÿ±ŸäŸæÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ÿ¨ÿßŸáÿ≤"
    else
        print_error "‚ùå ÿ≥ŸÉÿ±ŸäŸæÿ™ ÿßŸÑÿ™ÿ¥ÿ∫ŸäŸÑ ŸÖŸÅŸÇŸàÿØ"
        ((errors++))
    fi
    
    # ÿßÿÆÿ™ÿ®ÿßÿ± ÿ£ŸäŸÇŸàŸÜÿ© ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ®
    if [[ -f "$USER_HOME/Desktop/SRAOUF.desktop" ]]; then
        print_success "‚úÖ ÿ£ŸäŸÇŸàŸÜÿ© ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ® ÿ¨ÿßŸáÿ≤ÿ©"
    else
        print_error "‚ùå ÿ£ŸäŸÇŸàŸÜÿ© ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ® ŸÖŸÅŸÇŸàÿØÿ©"
        ((errors++))
    fi
    
    return $errors
}

# ÿ•ŸÜÿ¥ÿßÿ° ÿØŸÑŸäŸÑ ÿ≥ÿ±Ÿäÿπ
create_quick_guide() {
    print_step "ÿ•ŸÜÿ¥ÿßÿ° ÿØŸÑŸäŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ..."
    
    cat > "$SRAOUF_DIR/QUICK_START.txt" << EOF
üïπÔ∏è ÿØŸÑŸäŸÑ ÿßŸÑÿ®ÿØÿ° ÿßŸÑÿ≥ÿ±Ÿäÿπ - SRAOUF
==============================

üöÄ ŸÉŸäŸÅŸäÿ© ÿßŸÑŸÑÿπÿ®:
1. ÿßÿ∂ÿ∫ÿ∑ ŸÖÿ±ÿ™ŸäŸÜ ÿπŸÑŸâ ÿ£ŸäŸÇŸàŸÜÿ© "üïπÔ∏è ÿ≥ÿ±ÿßŸàŸÅ ŸÑŸÑÿ£ŸÑÿπÿßÿ®" ÿπŸÑŸâ ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ®
2. ÿ£Ÿà ÿ¥ÿ∫ŸÑ: $SRAOUF_DIR/scripts/launch.sh

üéÆ ÿßŸÑÿ™ÿ≠ŸÉŸÖ:
- ÿßŸÑÿ£ÿ≥ŸáŸÖ: ÿßŸÑÿ™ŸÜŸÇŸÑ
- Enter: ÿßÿÆÿ™Ÿäÿßÿ±
- Z: ÿ≤ÿ± A
- X: ÿ≤ÿ± B  
- Escape: ÿÆÿ±Ÿàÿ¨
- F1: ŸÇÿßÿ¶ŸÖÿ© RetroArch

üìÅ ÿ•ÿ∂ÿßŸÅÿ© ÿ£ŸÑÿπÿßÿ®:
ÿ∂ÿπ ŸÖŸÑŸÅÿßÿ™ ÿßŸÑÿ£ŸÑÿπÿßÿ® ŸÅŸä:
- $SRAOUF_DIR/games/nintendo-nes/
- $SRAOUF_DIR/games/nintendo-gb/

üéâ ÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿßŸÑŸÑÿπÿ®!
EOF

    print_success "ÿ™ŸÖ ÿ•ŸÜÿ¥ÿßÿ° ÿØŸÑŸäŸÑ ÿßŸÑÿßÿ≥ÿ™ÿÆÿØÿßŸÖ"
}

# ÿßŸÑÿØÿßŸÑÿ© ÿßŸÑÿ±ÿ¶Ÿäÿ≥Ÿäÿ©
main() {
    clear
    print_header "ÿ™ÿ´ÿ®Ÿäÿ™ ÿ≥ÿ±ÿßŸàŸÅ ÿßŸÑŸÖÿ´ÿßŸÑŸä - ŸäÿπŸÖŸÑ ÿ®ÿ£ŸÖÿ± Ÿàÿßÿ≠ÿØ ÿ®ŸÑÿß ŸÖÿ¥ÿßŸÉŸÑ"
    print_header "SRAOUF Perfect Installation - One Command, Zero Problems"
    
    print_info "ÿ®ÿØÿ° ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™ ÿßŸÑÿ™ŸÑŸÇÿßÿ¶Ÿä ÿßŸÑŸÉÿßŸÖŸÑ..."
    echo "$(date): Starting SRAOUF installation..." > "$LOG_FILE"
    
    # ÿ™ŸÜŸÅŸäÿ∞ ÿ¨ŸÖŸäÿπ ÿÆÿ∑Ÿàÿßÿ™ ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™
    fix_permissions_immediately
    create_perfect_structure  
    update_system
    install_emulators
    create_configs
    create_launcher
    create_desktop_icon
    download_sample_games
    create_quick_guide
    
    # ÿßÿÆÿ™ÿ®ÿßÿ± ŸÜŸáÿßÿ¶Ÿä
    if run_final_test; then
        local error_count=$?
        if [[ $error_count -eq 0 ]]; then
            echo
            print_header "üéâ ŸÜÿ¨ÿ≠ ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™ ÿ®ŸÜÿ≥ÿ®ÿ© 100%! üéâ"
            echo
            print_success "‚úÖ ÿ≥ÿ±ÿßŸàŸÅ ÿ¨ÿßŸáÿ≤ ŸÑŸÑÿπÿ® ÿßŸÑÿ¢ŸÜ!"
            print_info "üéÆ ŸÑŸÑÿπÿ®: ÿßÿ∂ÿ∫ÿ∑ ÿπŸÑŸâ ÿ£ŸäŸÇŸàŸÜÿ© ÿ≥ÿ∑ÿ≠ ÿßŸÑŸÖŸÉÿ™ÿ®"
            print_info "üìñ ÿØŸÑŸäŸÑ ÿ≥ÿ±Ÿäÿπ: $SRAOUF_DIR/QUICK_START.txt"
            echo
            print_success "üéä ÿßÿ≥ÿ™ŸÖÿ™ÿπ ÿ®ÿßŸÑÿ£ŸÑÿπÿßÿ®!"
            
        else
            print_warning "‚ö†Ô∏è ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™ ŸÖŸÉÿ™ŸÖŸÑ ŸÖÿπ $error_count ÿ™ÿ≠ÿ∞Ÿäÿ±ÿßÿ™ ÿ®ÿ≥Ÿäÿ∑ÿ©"
        fi
    else
        print_error "‚ùå ÿ≠ÿØÿ´ÿ™ ŸÖÿ¥ÿßŸÉŸÑ ŸÅŸä ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™"
        exit 1
    fi
    
    echo "$(date): SRAOUF installation completed successfully." >> "$LOG_FILE"
}

# ÿ™ÿ¥ÿ∫ŸäŸÑ ÿßŸÑÿ™ÿ´ÿ®Ÿäÿ™
main "$@"
